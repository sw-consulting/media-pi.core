# Copyright (c) 2025 sw.consulting
# This file is a part of Media Pi backend

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: mediapi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
     - pgdata:/var/lib/postgresql/data

  # Automated PostgreSQL backups
  # Creates daily compressed dumps in ./backup/data (mounted as /backups) and
  # cleans up files older than RETENTION_DAYS. Healthcheck reports unhealthy
  # if no fresh backup (<25h) exists.
  backup:
    image: ghcr.io/sw-consulting/db-backup:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: mediapi
      DB_USER: postgres
      DB_PASSWORD: postgres
      BACKUP_DIR: /backups
      RETENTION_DAYS: 7
    volumes:
      - ./backup/data:/backups
      - ./backup/logs:/var/log
    healthcheck:
      test: ["CMD", "healthcheck.sh"]
      interval: 1h
      timeout: 30s
      retries: 3
      start_period: 5s
    restart: always
    init: true

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  api:
    build:
      context: .
      dockerfile: ./MediaPi.Core/Dockerfile
    ports:
      - "8085:8080"
      - "8086:8081"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status/status"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 5s
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    volumes:
      - R:/Projects/certificates:/certificate:ro

#  ui:
#    image: ghcr.io/sw-consulting/media-pi.ui
#    build:
#      context: ../media-pi.ui
#      dockerfile: Dockerfile

#    ports:
#      - "8087:8082"
#      - "8088:8083"
#    depends_on:
#      api:
#        condition: service_started
#    volumes:
#      - R:/Projects/certificates:/etc/nginx/certificate:ro
#    environment:
#      API_URL: http://localhost:8085/api

volumes:
  pgdata:
